version: "3.8"

networks:
  quivr-network:
    name: zweites_gehirn_quivr-network
    driver: bridge

services:
  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - --api.insecure=true
      - --log.level=INFO
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entryPoints.http.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.myresolver.acme.email=arhodjjati@gmail.com
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./letsencrypt:/letsencrypt
    environment:
      - TRAEFIK_DASHBOARD_CREDENTIALS=${TRAEFIK_DASHBOARD_CREDENTIALS}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=https"
      - "traefik.http.routers.dashboard.rule=Host(`bb.virawelt.com`) && (PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.tls.domains[0].main=bb.virawelt.com"
      - "traefik.http.routers.dashboard.tls.domains[0].sans=bb.virawelt.com"
    networks:
      - traefik-network

  frontend:
    image: quivr-frontend-prebuilt
    pull_policy: never
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_ENV=local
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_CMS_URL=${NEXT_PUBLIC_CMS_URL}
        - NEXT_PUBLIC_FRONTEND_URL=${NEXT_PUBLIC_FRONTEND_URL}
        - NEXT_PUBLIC_AUTH_MODES=${NEXT_PUBLIC_AUTH_MODES}
    container_name: web
    depends_on:
      - backend-core
      - traefik
    restart: always
    # ports:
    #   - 3000:3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`bb.virawelt.com`)"
      - "traefik.http.routers.frontend.entrypoints=https"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    # networks:
    #   - quivr-network

  backend-core:
    image: stangirard/quivr-backend-prebuilt:latest
    pull_policy: if_not_present
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: backend-core
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:5050/healthz" ]
    command:
      - "uvicorn"
      - "main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5050"
      - "--workers"
      - "6"
    restart: always
    volumes:
      - ./backend/:/code/
    # ports:
    #   - 5050:5050
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.virawelt.com`)" #" && (PathPrefix(`/backend`))"
      - "traefik.http.routers.backend.entrypoints=https"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=5050"
    depends_on:
      - redis
      - traefik
      - worker
      - beat
    # networks:
    #   - quivr-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
        # ports:
        #   - 6379:6379
        # networks:
        #   - quivr-network

  worker:
    pull_policy: if_not_present
    image: stangirard/quivr-backend-prebuilt:latest
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: worker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: celery -A celery_worker worker -l info
    restart: always
    depends_on:
      - redis
    # networks:
    #   - quivr-network

  beat:
    image: stangirard/quivr-backend-prebuilt:latest
    pull_policy: if_not_present
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: beat
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: celery -A celery_worker beat -l info
    restart: always
    depends_on:
      - redis
    # networks:
    #   - quivr-network

  flower:
    image: stangirard/quivr-backend-prebuilt:latest
    pull_policy: if_not_present
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: flower
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: celery -A celery_worker flower -l info --port=5555
    restart: always
    depends_on:
      - redis
      - worker
      - beat
    # ports:
    #   - 5555:5555
    # networks:
    #   - quivr-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.api.virawelt.com`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
